{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/case.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "gsap.registerPlugin(ScrollTrigger);\n\n$('.section_case-hero').each(function () {\n  let tl = gsap.timeline({\n    scrollTrigger: {\n      trigger: $(this),\n      start: 'top top',\n      end: 'bottom top',\n      scrub: 0.2,\n      invalidateOnRefresh: true,\n    },\n  });\n\n  tl.to('.case-hero_bg', {\n    keyframes: {\n      '50%': {\n        opacity: 0.4,\n      },\n    },\n    scale: 1.2,\n  });\n  gsap\n    .timeline({\n      scrollTrigger: {\n        trigger: 'html',\n        start: 'top top',\n        scrub: 0.2,\n        invalidateOnRefresh: true,\n      },\n    })\n    .to('#scroll-arrow', {\n      keyframes: {\n        '50%': {\n          opacity: 0,\n        },\n      },\n    });\n});\n\n// Video Autoplay\nvar U = async () => {\n  await y(E);\n  let o = document.querySelectorAll('video');\n  if (!o.length) return;\n\n  let e = new Map(), // Track intersection observer status\n    i = new IntersectionObserver((t) => {\n      for (let { target: r, isIntersecting: n } of t) {\n        if (r instanceof HTMLVideoElement) {\n          e.set(r, n);\n          let videoContainer = r.closest('.w-background-video');\n          let button = findButtonWithinContainer(videoContainer);\n          if (button) {\n            // Get current video state, assume paused by default\n            let isPlaying = button.getAttribute('data-is-playing') === 'true';\n\n            // Check if we need to update video state\n            if ((isPlaying && !n) || (!isPlaying && n)) {\n              triggerButtonClick(button);\n              // Update the state in the data attribute\n              button.setAttribute('data-is-playing', n.toString());\n            }\n          }\n        }\n      }\n    }, {});\n\n  for (let t of o) {\n    (t.autoplay = !1), e.set(t, null), i.observe(t);\n\n    // Initialize the button attribute\n    let videoContainer = t.closest('.w-background-video');\n    let button = findButtonWithinContainer(videoContainer);\n    if (button) {\n      button.setAttribute('data-is-playing', 'false');\n\n      // Handle manual click\n      button.addEventListener('click', () => {\n        let isPlaying = button.getAttribute('data-is-playing') === 'true';\n        button.setAttribute('data-is-playing', (!isPlaying).toString());\n      });\n    }\n  }\n\n  let s = b(document, 'visibilitychange', () => {\n    for (let [t, r] of e) {\n      let button = findButtonWithinContainer(t.parentElement);\n      if (button) {\n        let isPlaying = button.getAttribute('data-is-playing') === 'true';\n        if ((document.hidden && isPlaying) || (!document.hidden && !isPlaying)) {\n          triggerButtonClick(button);\n          // Update the state in the data attribute\n          button.setAttribute('data-is-playing', (!document.hidden).toString());\n        }\n      }\n    }\n  });\n\n  return x(m, e, () => {\n    i.disconnect(), s();\n  });\n};\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,OAAK,eAAe,aAAa;AAEjC,IAAE,oBAAoB,EAAE,KAAK,WAAY;AACvC,QAAI,KAAK,KAAK,SAAS;AAAA,MACrB,eAAe;AAAA,QACb,SAAS,EAAE,IAAI;AAAA,QACf,OAAO;AAAA,QACP,KAAK;AAAA,QACL,OAAO;AAAA,QACP,qBAAqB;AAAA,MACvB;AAAA,IACF,CAAC;AAED,OAAG,GAAG,iBAAiB;AAAA,MACrB,WAAW;AAAA,QACT,OAAO;AAAA,UACL,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,OAAO;AAAA,IACT,CAAC;AACD,SACG,SAAS;AAAA,MACR,eAAe;AAAA,QACb,SAAS;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA,QACP,qBAAqB;AAAA,MACvB;AAAA,IACF,CAAC,EACA,GAAG,iBAAiB;AAAA,MACnB,WAAW;AAAA,QACT,OAAO;AAAA,UACL,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACL,CAAC;",
  "names": []
}
